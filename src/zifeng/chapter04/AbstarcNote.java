package zifeng.chapter04;

/**
 *  抽象类指在普通类的结构里面增加抽象方法的组成部分，抽象方法指的是没有方法体的方法，同时抽象方法还必须使用abstract 关键字进行定义。
 *  拥有抽象方法的类一定属于抽象类，抽象类要使用abstract 声明;
 *
 *  使用抽象类应遵循的原则：
 *      抽象类必须有子类，即每一个抽象类一定要被子类所继承，但是在Java中每一个子类只能继承一个抽象类，US哦一具备单继承权限；
 *      抽象类的子类(子类不是抽象类)，必须重写抽象类中的全部抽象方法(强制子类重写)
 *      依靠对象的向上转型概念，可以通过抽象类的子类完成抽象类的实例化对象操作
 *
 *
 *   抽象类的相关限制
 *       抽象类里面优于会存在一些属性，那么在抽象类中一定会存在构造方法，目的是为属性初始化，并且子类对象实例化时依然满足父类构造再调用子类构造情况；
 *       抽象类不能使用final定义，因为抽象类必须有子类，而final定义的类不能有子类
 *       抽象类中可以没有抽象方法，但是只要是抽象类，就不能直接使用关键字new实例化对象。
 *       抽象类中依然可以定义内部的抽象类，而实现的子类也可以根据需要选择是否定义内部类来继承抽象内部类
 *       外部抽象类不允许使用static声明，而内部的抽象类允许使用static声明，使用static声明的内部抽象类就相当于是一个外部抽象类。继承的时候适用外部抽象.内部类 的形式表示类名称。
 *       在抽象类中，如果定义static属性或方法时，就可以在没有对象的时候直接调用。
 *
 *
 *
 *
 *
 * 
 * 
 * 
 */
abstract class AbstarcNote {
    public void fun(){
        System.out.println("存在有方法体的方法");
    }
    //此方法并没有方法体的声明，并且存在abstract 关键字，表示抽象方法
    public abstract  void print();
}
